/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /


using System;
using Twilio.Converters;
using Twilio.TwiML.Voice;
using Stream = Twilio.TwiML.Voice.Stream;

namespace Twilio.UnitTests.TwiML
{

    
    public class StopTest : TwilioTest
    {
        [Fact]
        public void TestEmptyElement()
        {
            var elem = new Stop();

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Stop></Stop>",
                elem.ToString()
            );
        }

        [Fact]
        public void TestElementWithExtraAttributes()
        {
            var elem = new Stop();
            elem.SetOption("newParam1", "value");
            elem.SetOption("newParam2", 1);

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Stop newParam1=\"value\" newParam2=\"1\"></Stop>",
                elem.ToString()
            );
        }

        [Fact]
        public void TestNestElement()
        {
            var elem = new Stop();
            var child = new Stream();
            elem.Nest(child).Parameter();

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Stop>" + Environment.NewLine +
                "  <Stream>" + Environment.NewLine +
                "    <Parameter></Parameter>" + Environment.NewLine +
                "  </Stream>" + Environment.NewLine +
                "</Stop>",
                elem.ToString()
            );
        }

        [Fact]
        public void TestElementWithChildren()
        {
            var elem = new Stop();

            elem.Stream(
                "name",
                "connector_name",
                "url",
                Stream.TrackEnum.InboundTrack,
                "status_callback",
                Stream.StatusCallbackMethodEnum.Get
            );

            elem.Siprec(
                "name",
                "connector_name",
                Siprec.TrackEnum.InboundTrack,
                "status_callback",
                Siprec.StatusCallbackMethodEnum.Get
            );

            elem.Transcription(
                "name",
                Transcription.TrackEnum.InboundTrack,
                "status_callback_url",
                Transcription.StatusCallbackMethodEnum.Get,
                "inbound_track_label",
                "outbound_track_label",
                true,
                "language_code",
                "transcription_engine",
                true,
                "speech_model",
                "hints",
                true,
                "intelligence_service"
            );

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Stop>" + Environment.NewLine +
                "  <Stream name=\"name\" connectorName=\"connector_name\" url=\"url\" track=\"inbound_track\" statusCallback=\"status_callback\" statusCallbackMethod=\"GET\"></Stream>" + Environment.NewLine +
                "  <Siprec name=\"name\" connectorName=\"connector_name\" track=\"inbound_track\" statusCallback=\"status_callback\" statusCallbackMethod=\"GET\"></Siprec>" + Environment.NewLine +
                "  <Transcription name=\"name\" track=\"inbound_track\" statusCallbackUrl=\"status_callback_url\" statusCallbackMethod=\"GET\" inboundTrackLabel=\"inbound_track_label\" outboundTrackLabel=\"outbound_track_label\" partialResults=\"true\" languageCode=\"language_code\" transcriptionEngine=\"transcription_engine\" profanityFilter=\"true\" speechModel=\"speech_model\" hints=\"hints\" enableAutomaticPunctuation=\"true\" intelligenceService=\"intelligence_service\"></Transcription>" + Environment.NewLine +
                "</Stop>",
                elem.ToString()
            );
        }

        [Fact]
        public void TestElementWithTextNode()
        {
            var elem = new Stop();

            elem.AddText("Here is the content");

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Stop>Here is the content</Stop>",
                elem.ToString()
            );
        }

        [Fact]
        public void TestAllowGenericChildNodes()
        {
            var elem = new Stop();
            elem.AddChild("generic-tag").AddText("Content").SetOption("tag", true);

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Stop>" + Environment.NewLine +
                "  <generic-tag tag=\"True\">Content</generic-tag>" + Environment.NewLine +
                "</Stop>",
                elem.ToString()
            );
        }

        [Fact]
        public void TestAllowGenericChildrenOfChildNodes()
        {
            var elem = new Stop();
            var child = new Stream();
            elem.Nest(child).AddChild("generic-tag").SetOption("tag", true).AddText("Content");

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Stop>" + Environment.NewLine +
                "  <Stream>" + Environment.NewLine +
                "    <generic-tag tag=\"True\">Content</generic-tag>" + Environment.NewLine +
                "  </Stream>" + Environment.NewLine +
                "</Stop>",
                elem.ToString()
            );
        }

        [Fact]
        public void TestMixedContent()
        {
            var elem = new Stop();
            elem.AddText("before")
                .AddChild("Child").AddText("content");
            elem.AddText("after");

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Stop>before<Child>content</Child>after</Stop>",
                elem.ToString()
            );
        }
    }

}