/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /


using System;
using Twilio.Converters;
using Twilio.TwiML.Voice;

namespace Twilio.UnitTests.TwiML
{

    
    public class ApplicationTest : TwilioTest
    {
        [Fact]
        public void TestEmptyElement()
        {
            var elem = new Application();

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Application></Application>",
                elem.ToString()
            );
        }

        [Fact]
        public void TestElementWithParams()
        {
            var elem = new Application(
                "application_sid",
                new Uri("https://example.com"),
                Twilio.Http.HttpMethod.Get,
                new[] {Application.EventEnum.Initiated},
                new Uri("https://example.com"),
                Twilio.Http.HttpMethod.Get,
                "customer_id",
                true
            );
            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Application url=\"https://example.com\" method=\"GET\" statusCallbackEvent=\"initiated\" statusCallback=\"https://example.com\" statusCallbackMethod=\"GET\" customerId=\"customer_id\" copyParentTo=\"true\">application_sid</Application>",
                elem.ToString()
            );
        }

        [Fact]
        public void TestElementWithExtraAttributes()
        {
            var elem = new Application();
            elem.SetOption("newParam1", "value");
            elem.SetOption("newParam2", 1);

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Application newParam1=\"value\" newParam2=\"1\"></Application>",
                elem.ToString()
            );
        }

        [Fact]
        public void TestElementWithChildren()
        {
            var elem = new Application();

            elem.ApplicationSid("sid");

            elem.Parameter("name", "value");

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Application>" + Environment.NewLine +
                "  <ApplicationSid>sid</ApplicationSid>" + Environment.NewLine +
                "  <Parameter name=\"name\" value=\"value\"></Parameter>" + Environment.NewLine +
                "</Application>",
                elem.ToString()
            );
        }

        [Fact]
        public void TestElementWithTextNode()
        {
            var elem = new Application();

            elem.AddText("Here is the content");

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Application>Here is the content</Application>",
                elem.ToString()
            );
        }

        [Fact]
        public void TestAllowGenericChildNodes()
        {
            var elem = new Application();
            elem.AddChild("generic-tag").AddText("Content").SetOption("tag", true);

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Application>" + Environment.NewLine +
                "  <generic-tag tag=\"True\">Content</generic-tag>" + Environment.NewLine +
                "</Application>",
                elem.ToString()
            );
        }

        [Fact]
        public void TestAllowGenericChildrenOfChildNodes()
        {
            var elem = new Application();
            var child = new ApplicationSid();
            elem.Nest(child).AddChild("generic-tag").SetOption("tag", true).AddText("Content");

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Application>" + Environment.NewLine +
                "  <ApplicationSid>" + Environment.NewLine +
                "    <generic-tag tag=\"True\">Content</generic-tag>" + Environment.NewLine +
                "  </ApplicationSid>" + Environment.NewLine +
                "</Application>",
                elem.ToString()
            );
        }

        [Fact]
        public void TestMixedContent()
        {
            var elem = new Application();
            elem.AddText("before")
                .AddChild("Child").AddText("content");
            elem.AddText("after");

            Assert.Equal(
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + Environment.NewLine +
                "<Application>before<Child>content</Child>after</Application>",
                elem.ToString()
            );
        }
    }

}